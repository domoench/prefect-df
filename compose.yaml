# Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

services:
  # PREFECT WORKER
  worker:
    build:
      context: ./services/worker
    env_file:
      - .env
    volumes:
      - ./flows:/opt/prefect/flows
      - ./core:/opt/prefect/core
      - ./scripts/python:/opt/prefect/scripts/python

  # MLFlow Tracking server
  mlflow:
    build:
      context: ./services/mlflow
    env_file:
      - .env
    environment:
      AWS_ENDPOINT_URL: "http://minio:${MINIO_API_PORT}"
      MLFLOW_BACKEND_STORE_URI: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}"
    ports:
      - "${MLFLOW_TRACKING_PORT}:${MLFLOW_TRACKING_PORT}"
    # TODO: Healthcheck

  # Postgres (MLFlow tracking server backend store)
  postgres:
    image: postgres:16-alpine
    restart: always
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
     - db:/var/lib/postgresql/data

  # Jupyter lab container
  jupyter:
    build:
      context: ./services/jupyter
    env_file:
      - .env
    volumes:
      - ./flows:/app/flows
      - ./core:/app/core
      - ./notebooks:/app/notebooks
      - ./data:/app/data
    ports:
      - "${JUPYTER_PORT}:${JUPYTER_PORT}"

  # OBJECT STORAGE
  minio:
    image: minio/minio
    env_file:
      - .env
    volumes:
      - minio:/data
    ports:
      - "${MINIO_API_PORT}:${MINIO_API_PORT}"
      - "${MINIO_UI_PORT}:${MINIO_UI_PORT}"
    healthcheck:
      test: timeout 5s bash -c ":> /dev/tcp/127.0.0.1/${MINIO_API_PORT}" || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address "0.0.0.0:${MINIO_API_PORT}" --console-address "0.0.0.0:${MINIO_UI_PORT}"

  # Create necessary minio buckets
  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:${MINIO_API_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb minio/mlflow-artifacts
      mc mb minio/timeseries
      "

  # FLOW EXE{CUTION IMAGE PYTHON DEPENDENCIES
  flow-deps:
    image: "${AWS_ECR_ENDPOINT}/prefect-df/flows/flow-deps:latest"
    build:
      context: ./services/flow-deps
    env_file:
      - .env
    platform: linux/amd64


volumes:
  minio:
  db:
networks:
  default:
    name: df-network

